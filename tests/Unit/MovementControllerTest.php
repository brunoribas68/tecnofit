<?php

namespace Tests\Unit;

use App\Http\Controllers\MovementController;
use Tests\TestCase;
use Illuminate\Support\Facades\DB;
use Mockery;
use Illuminate\Foundation\Testing\RefreshDatabase;


class MovementControllerTest extends TestCase
{
    use RefreshDatabase;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed();

    }


    public function test_first_place_should_be_Jose(): void
    {
        $mockPersonalRecord = Mockery::mock('App\Models\PersonalRecord');

        $mockPersonalRecord->shouldReceive('select')
            ->withArgs([
                    'movement.name as movement_name',
                    'user.name as user_name',
                    'personal_record.value as personal_record',
                    'personal_record.date as record_date',
                    DB::raw('RANK() OVER (ORDER BY personal_record.value DESC) as ranking_position')
                ])
            ->andReturnSelf();

        $mockPersonalRecord->shouldReceive('join')
            ->andReturnSelf();
        $mockPersonalRecord->shouldReceive('where')
            ->andReturnSelf();
        $mockPersonalRecord->shouldReceive('orderBy')
            ->andReturnSelf();

        $mockPersonalRecord->shouldReceive('get')
            ->andReturn([
                (object)[
                    'movement_name' => 'Deadlift',
                    'user_name' => 'Jose',
                    'personal_record' => 190,
                    'record_date' => '2021-01-06 00:00:00',
                    'ranking_position' => 1,
                ],
            ]);

        $controller = new MovementController();
        $response = $controller->getRankingByMovement('Deadlift');

        $this->assertNotEmpty($response);
        $this->assertEquals('Deadlift', $response[0]->movement_name);
        $this->assertEquals('Jose', $response[0]->user_name);
        $this->assertEquals(190, $response[0]->personal_record);
        $this->assertEquals(1, $response[0]->ranking_position);
    }

    protected function tearDown(): void
    {
        parent::tearDown();
        Mockery::close();
        parent::tearDown();
    }
}
